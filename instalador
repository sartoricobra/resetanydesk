# Define um dicionário ($apps) com categorias como chaves e listas de aplicativos como valores.
# Cada aplicativo é representado por um objeto com propriedades Nome e ID (usada para instalar via winget).
$apps = @{
    "Comunicacao" = @(
        @{Nome="WhatsApp"; ID="9NKSQGP7F2NH"} # ID da Microsoft Store para WhatsApp
        @{Nome="Discord"; ID="Discord.Discord"}
    )
    "Navegador" = @(
        @{Nome="Chrome"; ID="Google.Chrome"} # Aplicativo do conjunto Padrao
        @{Nome="Brave"; ID="Brave.Brave"}
        @{Nome="Firefox"; ID="Mozilla.Firefox"}
    )
    "Midia" = @(
        @{Nome="VLC"; ID="VideoLAN.VLC"} # Aplicativo do conjunto Padrao
        @{Nome="Spotify"; ID="Spotify.Spotify"}
    )
    "Seguranca" = @(
        @{Nome="WireGuard"; ID="WireGuard.WireGuard"}
        @{Nome="Malwarebytes"; ID="Malwarebytes.Malwarebytes"}
    )
    "Produtividade" = @(
        @{Nome="OneDrive"; ID="Microsoft.OneDrive"}
        @{Nome="Notepad++"; ID="Notepad++.Notepad++"}
        @{Nome="7zip"; ID="7zip.7zip"}
        @{Nome="Microsoft Office"; ID="Microsoft.Office"} # Aplicativo do conjunto Padrao
        @{Nome="LibreOffice"; ID="TheDocumentFoundation.LibreOffice"}
    )
    "Utilitarios" = @(
        @{Nome="TreeSize Free"; ID="XP9M26RSCLNT88"}
        @{Nome="PowerToys"; ID="Microsoft.PowerToys"}
        @{Nome="LGHUB"; ID="Logitech.LGHUB"}
        @{Nome="qBittorrent"; ID="qBittorrent.qBittorrent"}
        @{Nome="WinDirStat"; ID="WinDirStat.WinDirStat"}
    )
    "Desenvolvimento" = @(
        @{Nome="Visual Studio Code"; ID="Microsoft.VisualStudioCode"}
        @{Nome="Git"; ID="Git.Git"}
        @{Nome="Python 3"; ID="9NCVDN91XZQP"}
    )
    "Jogos" = @(
        @{Nome="Steam"; ID="Valve.Steam"}
        @{Nome="Epic Games Launcher"; ID="EpicGames.EpicGamesLauncher"}
    )
    "Outros" = @(
        @{Nome="Astro CC (Store)"; ID="9PFZ8RFZG5X4"} # Indicando que pode ser da Store
    )
}

# Função que exibe o menu principal para o usuário.
function Show-Menu {
    Clear-Host
    Write-Host "============================"
    Write-Host "       MENU PRINCIPAL       "
    Write-Host "============================"
    Write-Host "[0] Instalar programas"
    Write-Host "[1] Rodar ativador"
    Write-Host "[Q] Sair"
    Write-Host "============================"
    Write-Host "Pressione uma tecla para escolher a opcao:"
}

# Função que lista os aplicativos disponíveis para instalação, agrupados por categoria, em 4 colunas.
function List-Apps {
    $global:appIndexMap = @{}
    $currentIndex = 1 # Índice sequencial para mapeamento e seleção

    $categoriasOrdenadas = $apps.Keys | Sort-Object
    foreach ($cat in $categoriasOrdenadas) {
        Write-Host ""
        Write-Host "--- Categoria: $cat ---" -ForegroundColor Yellow

        $appsNestaCategoria = $apps[$cat] | Sort-Object Nome
        
        if ($appsNestaCategoria.Count -eq 0) {
            Write-Host "  (Nenhum aplicativo nesta categoria)" -ForegroundColor Gray
            continue 
        }

        # Coleta os itens formatados para exibição e preenche o mapa de índice
        $appDisplayItems = New-Object System.Collections.Generic.List[string]
        foreach ($app in $appsNestaCategoria) {
            $textoFormatado = "[{0:D2}] {1}" -f $currentIndex, $app.Nome
            $appDisplayItems.Add($textoFormatado)
            $global:appIndexMap[$currentIndex] = $app.ID # Mapeia o índice sequencial para o ID do app
            $currentIndex++
        }

        # Exibe os itens coletados em colunas
        $numColumns = 4
        $itemPaddingWidth = 30 # Largura padrão para cada coluna (ajuste conforme necessário)

        # Tenta tornar a largura da coluna um pouco dinâmica com base na largura do console
        try {
            $consoleCurrentWidth = $Host.UI.RawUI.WindowSize.Width
            if ($consoleCurrentWidth -ge ($numColumns * 15)) { # Heurística: mínimo de 15 caracteres por coluna
                $itemPaddingWidth = [System.Math]::Floor($consoleCurrentWidth / $numColumns)
                $itemPaddingWidth = [System.Math]::Max(20, $itemPaddingWidth - 1) # Mínimo de 20, e -1 para pequena margem
            } else {
                $itemPaddingWidth = 25 # Fallback se o console for muito estreito
            }
        } catch {
            $itemPaddingWidth = 25 # Fallback se não conseguir obter a largura do console
        }

        for ($i = 0; $i -lt $appDisplayItems.Count; $i++) {
            $itemText = $appDisplayItems[$i]
            
            # Se o texto do item for maior que a largura da coluna, ele vai estourar.
            # Para um visual perfeito, seria necessário truncar o texto:
            # if ($itemText.Length -gt $itemPaddingWidth) { $itemText = $itemText.Substring(0, [System.Math]::Min($itemText.Length, $itemPaddingWidth - 3)) + "..." }
            # $itemText = $itemText.PadRight($itemPaddingWidth) # Re-aplica PadRight após truncar
            
            Write-Host -NoNewline ($itemText.PadRight($itemPaddingWidth)) -ForegroundColor Cyan

            # Adiciona uma nova linha após cada $numColumns itens ou se for o último item da lista da categoria
            if (((($i + 1) % $numColumns) -eq 0) -or ($i -eq ($appDisplayItems.Count - 1))) {
                Write-Host "" 
            }
        }
    }
}

# Função que instala os aplicativos selecionados via winget.
function Install-SelectedApps {
    param([int[]]$selected)
    if (-not $selected -or $selected.Count -eq 0) {
        Write-Warning "Nenhum numero valido selecionado para instalacao."
        return
    }
    foreach ($num in $selected) {
        if ($global:appIndexMap.ContainsKey($num)) { # Corrigido para usar $global:appIndexMap
            $id = $global:appIndexMap[$num]         # Corrigido para usar $global:appIndexMap
            $appName = ($apps.GetEnumerator() | ForEach-Object { $_.Value } | Where-Object { $_.ID -eq $id } | Select-Object -First 1).Nome
            Write-Host "Instalando $appName ($id)..." -ForegroundColor Green
            
            $wingetArgs = @("install", "--id", $id, "--accept-package-agreements", "--accept-source-agreements", "--disable-interactivity")

            if (($id -match "^\w{12}$") -and ($id -ne "Microsoft.Office")) { # Heurística para IDs da Store
                $wingetArgs += "--source", "msstore"
                Write-Host "Usando fonte msstore para $appName ($id)" -ForegroundColor DarkCyan
            }
            
            Write-Host "Comando: winget $($wingetArgs -join ' ')" -ForegroundColor DarkGray
            $processInfo = Start-Process winget -ArgumentList $wingetArgs -Wait -PassThru -NoNewWindow
            
            if ($processInfo.ExitCode -ne 0) {
                Write-Warning "Falha ao instalar $appName ($id). Código de saída: $($processInfo.ExitCode)"
            } else {
                Write-Host "$appName instalado com sucesso." -ForegroundColor Green
            }
        } else {
            Write-Warning "Opcao $num invalida."
        }
    }
}

# Função que executa um ativador.
function Run-Activator {
    Write-Host "Executando ativador via PowerShell..." -ForegroundColor Yellow
    try {
        Invoke-RestMethod -Uri "https://get.activated.win" | Invoke-Expression
        Write-Host "Comando do ativador concluido." -ForegroundColor Green
    } catch {
        Write-Error "Falha ao executar o ativador: $($_.Exception.Message)"
    }
    Write-Host "Pressione qualquer tecla para continuar..."
    [void][System.Console]::ReadKey($true)
}

# Loop principal do script.
while ($true) {
    Show-Menu
    $key = [System.Console]::ReadKey($true)
    $keyChar = $key.KeyChar.ToString().Trim().ToUpper()

    switch ($keyChar) {
        "0" {
            Clear-Host
            Write-Host "Lista de programas disponiveis para instalacao:" -ForegroundColor Magenta
            List-Apps

            do {
                Write-Host ""
                Write-Host "Digite os numeros dos programas (separados por espaco)," -ForegroundColor White
                Write-Host "ou uma das seguintes opcoes:" -ForegroundColor White
                Write-Host "  [L]      Listar os programas novamente" -ForegroundColor Cyan
                Write-Host "  [Q]      Cancelar e voltar ao menu principal" -ForegroundColor Cyan
                Write-Host "  [Padrao] Instalar o conjunto padrao (Chrome, VLC, Office)" -ForegroundColor Cyan
                Write-Host "Digite a selecao e pressione ENTER:" -ForegroundColor White

                $userInputFromHost = Read-Host 

                if ($userInputFromHost -eq $null) { 
                    Write-Warning "Nenhuma entrada detectada. Tente novamente ou digite L, Q ou Padrao."
                    Start-Sleep -Seconds 1
                    continue
                }

                $userInputUpper = $userInputFromHost.Trim().ToUpper() 

                if ($userInputUpper -eq "Q") {
                    Write-Host "Instalacao cancelada. Retornando ao menu principal..." -ForegroundColor Yellow
                    Start-Sleep -Seconds 1
                    break 
                }

                if ($userInputUpper -eq "L") {
                    Clear-Host
                    Write-Host "Lista de programas disponiveis para instalacao:" -ForegroundColor Magenta
                    List-Apps
                    continue 
                }

                if ($userInputUpper -eq "PADRAO") {
                    Write-Host "`nIniciando instalacao do conjunto padrao (Chrome, VLC, Microsoft Office)..." -ForegroundColor Green
                    $defaultAppNamesToInstall = @("Chrome", "VLC", "Microsoft Office") 
                    $numbersForDefaultSet = New-Object System.Collections.Generic.List[int]

                    if ($global:appIndexMap.Count -gt 0) {
                        foreach ($displayIndexKey in ($global:appIndexMap.Keys | Sort-Object {[int]$_})) {
                            $appIDFromMap = $global:appIndexMap[$displayIndexKey]
                            $currentAppNameFromMap = $null
                            foreach($categoryKeyGlobal in $apps.Keys){
                                $foundAppGlobal = $apps[$categoryKeyGlobal] | Where-Object {$_.ID -eq $appIDFromMap} | Select-Object -First 1
                                if($foundAppGlobal){
                                    $currentAppNameFromMap = $foundAppGlobal.Nome
                                    break
                                }
                            }
                            if($currentAppNameFromMap -and ($defaultAppNamesToInstall -contains $currentAppNameFromMap)){
                                $numbersForDefaultSet.Add([int]$displayIndexKey)
                            }
                        }
                    }

                    if ($numbersForDefaultSet.Count -gt 0) {
                        Install-SelectedApps -selected ($numbersForDefaultSet.ToArray()) 
                        Write-Host "`nInstalacao do conjunto padrao solicitada. Verifique o status acima." -ForegroundColor Green
                    } else {
                        Write-Warning "Nao foi possivel encontrar todos os aplicativos do conjunto padrao na lista atual."
                    }
                    Write-Host "Voce pode selecionar mais aplicativos, ou digitar L, Q, Padrao." 
                    Start-Sleep -Seconds 1
                    continue 
                }
                
                $maxIndex = 0
                if ($global:appIndexMap.Keys.Count -gt 0) { 
                     $maxIndex = ($global:appIndexMap.Keys | ForEach-Object { [int]$_ } | Measure-Object -Maximum).Maximum
                } else {
                    Write-Warning "Mapa de aplicativos esta vazio. Nao e possivel selecionar por numero."
                    continue
                }
                
                $invalidEntries = New-Object System.Collections.ArrayList 
                
                [int[]]$numsToInstall = $userInputFromHost -split '\s+' | ForEach
