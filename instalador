#region ADMINISTRATOR - Verificacao e Elevacao de Permissao Inteligente
# 1. Verifica se o script esta rodando como Administrador
$currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
$isAdmin = $currentUser.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $isAdmin) {
    # 2. Se NAO for admin, inicia o processo de auto-elevacao.
    $scriptPath = $MyInvocation.MyCommand.Path
    $arguments = "-NoProfile -ExecutionPolicy Bypass"

    if (-not [string]::IsNullOrEmpty($scriptPath)) {
        $arguments += " -File `"$scriptPath`""
    }
    else {
        $tempScriptPath = Join-Path $env:TEMP ([System.Guid]::NewGuid().ToString() + ".ps1")
        $scriptContent = $MyInvocation.MyCommand.Definition
        $scriptContent | Out-File -FilePath $tempScriptPath -Encoding utf8
        $arguments += " -File `"$tempScriptPath`""
    }

    Write-Warning "Permissao de administrador necessaria. Reiniciando o script com elevacao..."
    Start-Process powershell.exe -ArgumentList $arguments -Verb RunAs
    
    # 3. Fecha a janela atual
    exit
}
#endregion

### O SCRIPT PRINCIPAL AGORA RODA DENTRO DE UM BLOCO TRY/FINALLY ###
try {
    #region INFO
    <#
    .SYNOPSIS
        Instalador de aplicativos e utilitario de sistema com interface grafica (GUI).
    .DESCRIPTION
        Usa botoes clicaveis em vez de checkboxes para uma interface mais moderna.
    .AUTHOR
        Adaptado por Gemini
    .VERSION
        6.6 (Correcao Critica de Ordem de Parametro no Job)
    #>
    #endregion

    $PSDefaultParameterValues['*:Encoding'] = 'utf8'
    
    $script:installJob = $null
    $script:installQueue = [System.Collections.Generic.Queue[object]]::new()

    #region GUI - Criacao da Interface Grafica com Windows Forms

    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    $defaultButtonColor = [System.Drawing.Color]::WhiteSmoke
    $selectedButtonColor = [System.Drawing.Color]::FromArgb(204, 255, 204)
    $selectedButtonBorderColor = [System.Drawing.Color]::DarkGreen
    
    $mainForm = New-Object System.Windows.Forms.Form
    $mainForm.Text = 'Pos Instalador de Aplicativos (Executando como Administrador)'
    $mainForm.Size = New-Object System.Drawing.Size(850, 950)
    $mainForm.StartPosition = 'CenterScreen'
    $mainForm.FormBorderStyle = 'FixedSingle'
    $mainForm.MaximizeBox = $false

    $mainPanel = New-Object System.Windows.Forms.Panel; $mainPanel.Location = New-Object System.Drawing.Point(20, 20); $mainPanel.Size = New-Object System.Drawing.Size(790, 540); $mainPanel.AutoScroll = $true; $mainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle; $mainForm.Controls.Add($mainPanel)
    $actionPanel = New-Object System.Windows.Forms.Panel; $actionPanel.Location = New-Object System.Drawing.Point(20, 570); $actionPanel.Size = New-Object System.Drawing.Size(790, 60); $mainForm.Controls.Add($actionPanel)
    $logLabel = New-Object System.Windows.Forms.Label; $logLabel.Text = "Log de Instalacao:"; $logLabel.Location = New-Object System.Drawing.Point(20, 640); $logLabel.AutoSize = $true; $mainForm.Controls.Add($logLabel)
    $logTextBox = New-Object System.Windows.Forms.TextBox; $logTextBox.Location = New-Object System.Drawing.Point(20, 660); $logTextBox.Size = New-Object System.Drawing.Size(790, 225); $logTextBox.Multiline = $true; $logTextBox.ScrollBars = 'Vertical'; $logTextBox.ReadOnly = $true; $logTextBox.Font = New-Object System.Drawing.Font('Consolas', 8); $mainForm.Controls.Add($logTextBox)
    
    function Log-Message { param($Message); if ($logTextBox.InvokeRequired) { $logTextBox.Invoke([Action[string]]$logTextBox.AppendText, "$Message`r`n") } else { $logTextBox.AppendText("$Message`r`n") } }
    
    $apps = @{
        "Comunicacao" = @( @{Nome="WhatsApp"; ID="9NKSQGP7F2NH"; IsDefault=$false}, @{Nome="Discord"; ID="Discord.Discord"; IsDefault=$false} );
        "Navegador" = @( @{Nome="Chrome"; ID="Google.Chrome"; IsDefault=$true}, @{Nome="Brave"; ID="Brave.Brave"; IsDefault=$false}, @{Nome="Firefox"; ID="Mozilla.Firefox"; IsDefault=$false} );
        "Entretenimento" = @( @{Nome="VLC"; ID="VideoLAN.VLC"; IsDefault=$true}, @{Nome="Spotify"; ID="Spotify.Spotify"; IsDefault=$false}, @{Nome="Corel Draw"; ID="9PBL2KQXQ47K"; IsDefault=$false}, @{Nome="Stremio"; ID="Stremio.Stremio"; IsDefault=$false} );
        "Seguranca" = @( @{Nome="WireGuard"; ID="WireGuard.WireGuard"; IsDefault=$false}, @{Nome="Malwarebytes"; ID="Malwarebytes.Malwarebytes"; IsDefault=$false} );
        "Produtividade" = @( @{Nome="OneDrive"; ID="Microsoft.OneDrive"; IsDefault=$false}, @{Nome="Notepad++"; ID="Notepad++.Notepad++"; IsDefault=$false}, @{Nome="7zip"; ID="7zip.7zip"; IsDefault=$false}, @{Nome="Microsoft Office"; ID="Microsoft.Office"; IsDefault=$true}, @{Nome="LibreOffice"; ID="TheDocumentFoundation.LibreOffice"; IsDefault=$false}, @{Nome="Asana"; ID="Asana.Asana"; IsDefault=$false}, @{Nome="Trello"; ID="9NBLGGH4XXVW"; IsDefault=$false} );
        "Utilitarios" = @( @{Nome="TreeSize Free"; ID="XP9M26RSCLNT88"; IsDefault=$false}, @{Nome="PowerToys"; ID="Microsoft.PowerToys"; IsDefault=$false}, @{Nome="LGHUB"; ID="Logitech.LGHUB"; IsDefault=$false}, @{Nome="qBittorrent"; ID="qBittorrent.qBittorrent"; IsDefault=$false}, @{Nome="Chocolatey"; ID="Chocolatey.Chocolatey"; IsDefault=$false}, @{Nome="AnyDesk"; ID="anydesk.anydesk"; IsDefault=$true}, @{Nome="Teamviewer"; ID="XPDM17HK323C4X"; IsDefault=$false} );
        "Desenvolvimento" = @( @{Nome="Visual Studio Code"; ID="Microsoft.VisualStudioCode"; IsDefault=$false}, @{Nome="Git"; ID="Git.Git"; IsDefault=$false}, @{Nome="Python 3"; ID="9NCVDN91XZQP"; IsDefault=$false}, @{Nome="Anaconda"; ID="Anaconda.Anaconda3"; IsDefault=$false}, @{Nome="NodeJS"; ID="OpenJS.NodeJS"; IsDefault=$false}, @{Nome="Cmake"; ID="Kitware.CMake"; IsDefault=$false}, @{Nome="MongoDB Server"; ID="MongoDB.Server"; IsDefault=$false}, @{Nome="MongoDB Tools"; ID="MongoDB.DatabaseTools"; IsDefault=$false}, @{Nome="MSYS2"; ID="MSYS2.MSYS2"; IsDefault=$false} );
        "Jogos" = @( @{Nome="Steam"; ID="Valve.Steam"; IsDefault=$false}, @{Nome="Epic Games Launcher"; ID="EpicGames.EpicGamesLauncher"; IsDefault=$false} );
        "Audio" = @( @{Nome="Astro Command Center"; ID="9PFZ8RFZG5X4"; IsDefault=$false} )
    }

    $appButtons = @()
    $yPos = 10
    $categoriasOrdenadas = $apps.Keys | Sort-Object

    foreach ($cat in $categoriasOrdenadas) {
        $groupBox = New-Object System.Windows.Forms.GroupBox; $groupBox.Text = $cat; $groupBox.Location = New-Object System.Drawing.Point(10, $yPos); $groupBox.Size = New-Object System.Drawing.Size(760, 100); $groupBox.Font = New-Object System.Drawing.Font('Segoe UI', 9, [System.Drawing.FontStyle]::Bold); $mainPanel.Controls.Add($groupBox)
        $flowLayoutPanel = New-Object System.Windows.Forms.FlowLayoutPanel; $flowLayoutPanel.Dock = [System.Windows.Forms.DockStyle]::Fill; $flowLayoutPanel.FlowDirection = 'LeftToRight'; $groupBox.Controls.Add($flowLayoutPanel)

        $appsNestaCategoria = $apps[$cat] | Sort-Object Nome
        foreach ($app in $appsNestaCategoria) {
            $appButton = New-Object System.Windows.Forms.Button
            $appButton.Text = $app.Nome; $appButton.Tag = $app; $appButton.Size = New-Object System.Drawing.Size(170, 32); $appButton.Font = New-Object System.Drawing.Font('Segoe UI', 8.5)
            $appButton.Margin = New-Object System.Windows.Forms.Padding(5); $appButton.BackColor = $defaultButtonColor; $appButton.FlatStyle = 'Flat'; $appButton.FlatAppearance.BorderSize = 1; $appButton.FlatAppearance.BorderColor = [System.Drawing.Color]::LightGray
            $appButton.Add_Click({ if ($this.BackColor -eq $selectedButtonColor) { $this.BackColor = $defaultButtonColor; $this.FlatAppearance.BorderColor = [System.Drawing.Color]::LightGray } else { $this.BackColor = $selectedButtonColor; $this.FlatAppearance.BorderColor = $selectedButtonBorderColor } })
            $flowLayoutPanel.Controls.Add($appButton); $appButtons += $appButton
        }
        
        $requiredHeight = $flowLayoutPanel.GetPreferredSize([System.Drawing.Size]::new(740, 0)).Height + 30; $groupBox.Height = $requiredHeight; $yPos += $groupBox.Height + 10
    }

    $installButton = New-Object System.Windows.Forms.Button; $installButton.Text = 'Instalar Selecionados'; $installButton.Size = New-Object System.Drawing.Size(150, 35); $installButton.Location = New-Object System.Drawing.Point(0, 10); $installButton.BackColor = [System.Drawing.Color]::FromArgb(67, 160, 71); $installButton.ForeColor = [System.Drawing.Color]::White; $actionPanel.Controls.Add($installButton)
    $selectDefaultButton = New-Object System.Windows.Forms.Button; $selectDefaultButton.Text = 'Selecionar Padrao'; $selectDefaultButton.Size = New-Object System.Drawing.Size(130, 35); $selectDefaultButton.Location = New-Object System.Drawing.Point(160, 10); $actionPanel.Controls.Add($selectDefaultButton)
    $selectAllButton = New-Object System.Windows.Forms.Button; $selectAllButton.Text = 'Selecionar Todos'; $selectAllButton.Size = New-Object System.Drawing.Size(130, 35); $selectAllButton.Location = New-Object System.Drawing.Point(300, 10); $actionPanel.Controls.Add($selectAllButton)
    $deselectAllButton = New-Object System.Windows.Forms.Button; $deselectAllButton.Text = 'Limpar Selecao'; $deselectAllButton.Size = New-Object System.Drawing.Size(130, 35); $deselectAllButton.Location = New-Object System.Drawing.Point(440, 10); $actionPanel.Controls.Add($deselectAllButton)
    $activatorButton = New-Object System.Windows.Forms.Button; $activatorButton.Text = 'Rodar Ativador'; $activatorButton.Size = New-Object System.Drawing.Size(120, 35); $activatorButton.Location = New-Object System.Drawing.Point(640, 10); $activatorButton.BackColor = [System.Drawing.Color]::LightCoral; $actionPanel.Controls.Add($activatorButton)
    
    #endregion

    #region EVENT HANDLERS - Logica dos Botoes
    
    $jobCheckTimer = New-Object System.Windows.Forms.Timer
    $jobCheckTimer.Interval = 1000
    $jobCheckTimer.Add_Tick({
        if ($null -ne $script:installJob) {
            Receive-Job -Job $script:installJob | ForEach-Object { Log-Message $_ }
            if ($script:installJob.State -in @('Completed', 'Failed', 'Stopped')) { Remove-Job -Job $script:installJob; $script:installJob = $null }
        }
        if ($null -eq $script:installJob -and $script:installQueue.Count -gt 0) {
            $appParaInstalar = $script:installQueue.Dequeue()
            Log-Message "`n------------------------------------------------------------"; Log-Message "Iniciando instalacao de: $($appParaInstalar.Nome)"
            
            $script:installJob = Start-Job -ScriptBlock {
                ### CORREÇÃO CRÍTICA DE ORDEM ###
                # A declaracao de param() DEVE ser a primeira linha do ScriptBlock.
                param($app)

                # A configuracao de codificacao vem DEPOIS do param().
                [System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                
                Write-Output "--- Instalando $($app.Nome) ($($app.ID)) ---"
                $wingetArgs = @("install", "--id", $app.ID, "--accept-package-agreements", "--accept-source-agreements", "--disable-interactivity")
                if (($app.ID -match "^\w{12}$") -and ($app.ID -ne "Microsoft.Office")) { $wingetArgs += "--source", "msstore"; Write-Output "INFO: ID detectado como da Microsoft Store. Especificando --source msstore." }
                Write-Output "COMANDO: winget $($wingetArgs -join ' ')"; try { & winget @wingetArgs | ForEach-Object { Write-Output "  $_" }; if ($LASTEXITCODE -ne 0) { Write-Warning "Falha ao instalar $($app.Nome). Codigo de saida: $LASTEXITCODE" } else { Write-Output "$($app.Nome) instalado com sucesso." } } catch { Write-Warning "ERRO: Falha critica ao instalar $($app.Nome). $($_.Exception.Message)" }
            } -ArgumentList $appParaInstalar
        }
        if ($null -eq $script:installJob -and $script:installQueue.Count -eq 0) {
            $jobCheckTimer.Stop(); Log-Message "`n------------------------------------------------------------"; Log-Message "Todas as instalacoes foram concluidas."; $actionPanel.Controls | ForEach-Object { $_.Enabled = $true }
        }
    })

    $installButton.Add_Click({
        $selectedApps = $appButtons | Where-Object { $_.BackColor -eq $selectedButtonColor } | Select-Object -ExpandProperty Tag
        if ($selectedApps.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("Nenhum aplicativo selecionado para instalacao.", "Aviso", "OK", "Warning"); return }
        $script:installQueue.Clear(); $selectedApps | ForEach-Object { $script:installQueue.Enqueue($_) }
        $actionPanel.Controls | ForEach-Object { $_.Enabled = $false }; $logTextBox.Clear(); Log-Message "Iniciando processo de instalacao em fila..."
        $jobCheckTimer.Start()
    })

    $activatorButton.Add_Click({
        $confirmation = [System.Windows.Forms.MessageBox]::Show("AVISO DE SEGURANCA:`n`nVoce esta prestes a executar um script de ativacao baixado da internet (`get.activated.win`). Executar scripts de fontes nao confiaveis pode ser perigoso.`n`nDeseja continuar?","Confirmacao de Seguranca", "YesNo", "Warning")
        if ($confirmation -eq 'No') { Log-Message "Operacao do ativador cancelada pelo usuario."; return }
        $logTextBox.Clear(); Log-Message "Executando o ativador..."; $activatorButton.Enabled = $false
        try { Invoke-RestMethod -Uri "https://get.activated.win" | Invoke-Expression; Log-Message "Comando do ativador concluido com sucesso." }
        catch { Log-Message "ERRO: Falha ao executar o ativador: $($_.Exception.Message)" }
        finally { $activatorButton.Enabled = $true }
    })

    $selectDefaultButton.Add_Click({ foreach ($btn in $appButtons) { if ($btn.Tag.IsDefault) { $btn.BackColor = $selectedButtonColor; $btn.FlatAppearance.BorderColor = $selectedButtonBorderColor } } })
    $selectAllButton.Add_Click({ foreach ($btn in $appButtons) { $btn.BackColor = $selectedButtonColor; $btn.FlatAppearance.BorderColor = $selectedButtonBorderColor } })
    $deselectAllButton.Add_Click({ foreach ($btn in $appButtons) { $btn.BackColor = $defaultButtonColor; $btn.FlatAppearance.BorderColor = [System.Drawing.Color]::LightGray } })

    $mainForm.Add_FormClosing({
        $jobCheckTimer.Stop()
        if($null -ne $script:installJob) { Remove-Job -Job $script:installJob -Force }
    })
    #endregion

    #region EXECUTION - Exibe o formulario
    $mainForm.ShowDialog()
    #endregion
}
finally {
    if ($MyInvocation.MyCommand.Path -and $MyInvocation.MyCommand.Path.StartsWith($env:TEMP)) {
        Remove-Item $MyInvocation.MyCommand.Path -Force -ErrorAction SilentlyContinue
    }
}
